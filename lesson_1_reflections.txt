How did viewing a diff between two versions of a file help you see the bug that
was introduced?

	It made it easier to tell what the exact changes between the two files were, and from there, made it easier to derive the intention of the change and to see whether or not it succeeded.


How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

	By having a visible log of past changes, you can track the type and kinds of changes you are doing over a period of time. It also allows you to see thought processes, things tried in the past, and hopefully see various other possibilities that could be explored.

	Having a paper trail of the also allows internal review and auditing into your habits, which may easily be overlooked when people work on auto-pilot.


What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

	Being able to choose when to manually save allows people to create checkpoints at places that logically make sense, such as after adding a feature or fixing a bug or typo. It makes it also cleaner and neater to check the previous versions, knowing that you won't get stuck inbetween two points at some incomplete junction.

	One downside to not having it manually save is if the user is not diligent at saving over long periods of time, they may lose their work in the case of a hard failure.


Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Git is focused on entire projects, and is only used for version control. Google docs is more focused on interactivity with documents in between various users, so it treats each document as an entire project on its own, rather than multiple files.


How can you use the commands git log and git diff to view the history of files?

	Git log can be used to call out the entire history log of changes, along with the comments by the author of the change.

	Git diff can be used to compare two different commits and see exactly what the changes to the files were.


How might using version control make you more confident to make changes that
could break something?

	If there is a problem that you introduced that is only discovered later on, you can narrow it down more easily using git to compare previous changes, rather than having to laboriously search for the problem with even more changes that might introduce new bugs.

Now that you have your workspace set up, what do you want to try using Git for?

    I wish I could use git for a variety of collaboration projects, and also for my own programming projects now.


Commands:

q |    exit git log!
git log  |    List the commits and show which files have changed
git log --stat  |    Show addition information about the commits
git diff id1 id2  |    Compare two commits
git clone  |    Create a local copy/clone from the repository
git config --global color.ui auto |    get colored diff output
git checkout  |    Shows a previous version of the file. This is not a checkout to edit like in SVN or TFS!