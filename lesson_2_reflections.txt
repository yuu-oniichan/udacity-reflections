What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, git will create a hidden direction containing all the metadata on the files. This is necessary for git to track files and set up a file history.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area allows control over what files are included in each commit and the overall repository. It allows finer control as well, in case there are multiple changes, and some of which could later be branched off.

How can you use the staging area to make sure you have one commit per logical
change?

	The staging area allows you to separate out different files and changes by file, to ensure that you are committing only one logical step at a time. By allowing easy tracking of changes between the working and staging areas and the repository (and multiple commits), the level of control makes it easier to ensure that this happens.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches will be helpful when trying out new features or implementing different fixes for different problems on the same version. Because branches can later be merged, it will make adding multiple things easier to keep track of, especially in a large coding project.

How do the diagrams help you visualize the branch structure?

	The diagrams are extremely helpful in picturing the current status of the master and other branches. They show where projects have diverged and where they can be combined.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branches together is the sum of their parts together. We represent it as two branches meeting to become one because that is exactly what occurs. Using the logic of 3 versions, we can guesstimate the changes that should be added and removed, except for the stuff that will be covered when we have merge conflicts.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Git's automatic merging can help save a lot of time and headaches on merging code from different branches, but it can also create a lot of issues when people are modifying the same sections of code, or adding redundent features.

	Merging manually however, is required in many of these conflict cases as otherwise the comptuer could make a mess even worse, or just program itself.


Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.